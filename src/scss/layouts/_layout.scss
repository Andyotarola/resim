.container {
   width: 100%;
   margin: 0 auto;
   padding: 0 5px;

   @for $i from 1 through 12 {
      .row>.col-sm-#{$i} {
         grid-column: span #{$i};
         width: 100%;
      }
   }

   .row>.col-center {
      grid-column: span 12;
      width: 100%;

   }

   &.center {
      display: grid;
      min-height: 100vh;
      align-content: center;
   }

   &.expanded {
      width: 100%;
   }

   &>.row {
      width: 100%;
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      row-gap: 1rem;
      -moz-column-gap: .65rem;
      column-gap: .65rem;
      padding-top: .9em;
      padding-bottom: .9em;
   }

   @include rwd(medium) {
      width: 94%;
      padding: 0;

      &>.row {
         padding-top: .9em;
         padding-bottom: .9em;
      }

      @for $i from 1 through 12 {
         .row>.col-md-#{$i} {
            width: 100%;
            grid-column: span #{$i};
         }
      }

      .row>.col-center {
         grid-column: 4 / span 6;
         width: 100%;
      }
   }

   @include rwd(large) {
      width: 96%;

      @for $i from 1 through 12 {
         .row>.col-lg-#{$i} {
            grid-column: span #{$i};
            width: 100%;
         }
      }
   }

   @include rwd(xlarge) {
      width: 70%;
   }

}

$positions: top,
bottom,
left,
right;

@for $i from 1 through length($positions) {

   @for $x from 1 through 5 {

      .m#{str-slice(nth($positions, $i),1,1)}-#{$x} {
         margin-#{nth($positions, $i)}: $x * .25rem !important;
      }

      .p#{str-slice(nth($positions, $i),1,1)}-#{$x} {
         padding-#{nth($positions, $i)}: $x * .25rem !important;
      }

      @include rwd(medium, large) {
         .m-md-#{str-slice(nth($positions, $i),1,1)}-#{$x} {
            margin-#{nth($positions, $i)}: $x * .25rem !important;
         }

         .p-md-#{str-slice(nth($positions, $i),1,1)}-#{$x} {
            padding-#{nth($positions, $i)}: $x * .25rem !important;
         }
      }

      @include rwd(large) {
         .m-lg-#{str-slice(nth($positions, $i),1,1)}-#{$x} {
            margin-#{nth($positions, $i)}: $x * .25rem !important;
         }

         .p-lg-#{str-slice(nth($positions, $i),1,1)}-#{$x} {
            padding-#{nth($positions, $i)}: $x * .25rem !important;
         }
      }

      @include rwd(0, map-get($breakpoints, medium)) {
         .m-sm-#{str-slice(nth($positions, $i),1,1)}-#{$x} {
            margin-#{nth($positions, $i)}: $x * .25rem !important;
         }

         .p-sm-#{str-slice(nth($positions, $i),1,1)}-#{$x} {
            padding-#{nth($positions, $i)}: $x * .25rem !important;
         }
      }

   }

}

@include rwd(0, map-get($breakpoints, medium)) {
   .d-sm-none {
      display: none !important;
   }
}

@include rwd(medium, large) {
   .d-md-none {
      display: none !important;
   }
}

@include rwd(large) {
   .d-lg-none {
      display: none !important;
   }
}

@for $x from 1 through 5 {
   .p-#{$x} {
      padding: $x * .25rem !important;
   }

   .m-#{$x} {
      margin: $x * .25rem !important;
   }
}

.d-block{
   display: block !important;
}

.m-none {
   margin: 0 !important;
}

.p-none {
   padding: 0 !important;
}

.w-100 {
   width: 100% !important;
}

.h-100 {
   height: 100% !important;
}

.us-none {
   -webkit-user-select: none;
   -moz-user-select: none;
   -ms-user-select: none;
   user-select: none;
}

.flex {
   display: flex;
}

.flex--reverse {
   flex-direction: row-reverse;
}

.flex--column {
   display: flex;
   flex-direction: column;
}

.flex--column--reverse {
   flex-direction: column-reverse;
}

.jc--center {
   justify-content: center;
}

.jc--end {
   justify-content: flex-end;
}

.jc--around {
   justify-content: space-around;
}

.jc--between {
   justify-content: space-between;
}

.p-relative {
   position: relative !important;
}
.p-absolute{
   position: absolute !important;
}

$self: start,
center,
end;

@each $value in $self {
   .as--#{$value} {
      align-self: #{$value};
   }

   .js--#{$value} {
      justify-self: #{$value};
   }

   @if $value==start or $value==end {
      .ai--#{$value} {
         align-items: flex-#{$value};
      }
   }

   @else {
      .ai--#{$value} {
         align-items: #{$value};
      }
   }
}